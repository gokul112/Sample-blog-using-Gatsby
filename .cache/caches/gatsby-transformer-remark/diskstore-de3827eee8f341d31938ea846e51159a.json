{"expireTime":9007200841526812000,"key":"transformer-remark-markdown-html-62075c18ef1aa1893c5371f013101fcf-gatsby-remark-images-","val":"<p>There are a few ways to clone an array in JavaScript,</p>\n<h3>Object.assign</h3>\n<p><code>Object.assign</code> allows us to make a shallow copy of any kind of object including arrays.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = Object.assign([], a); // [1,2,3]</pre>\n<h3>Array.slice</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = a.slice(0); // [1,2,3]</pre>\n<h3>Array.from</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array. It takes array like objects like <code>Set</code> and it also takes an array as an argument.</p>\n<pre>const a = [1,2,3];\nconst b = Array.from(a); // [1,2,3]</pre>\n<h3>Spread Operator</h3>\n<p>The fastest way to copy an array, which is available with ES6 or later, is the spread operator.</p>\n<pre>const a = [1,2,3];\nconst b = [...a]; // [1,2,3]</pre>\n<h3>JSON.parse and JSON.stringify</h3>\n<p>This allows for deep copy of an array and only works if the objects in the array are plain objects. It can be used like this:</p>\n<pre>const a = [1,2,3];\nconst b = JSON.parse(JSON.stringify(a)); // [1,2,3]</pre>"}
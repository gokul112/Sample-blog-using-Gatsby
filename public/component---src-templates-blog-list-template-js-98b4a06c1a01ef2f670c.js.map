{"version":3,"sources":["webpack:///./src/templates/blog-list-template.js"],"names":["BlogList","props","state","pageNumArray","componentDidMount","this","setPageArray","componentWillReceiveProps","totalCount","data","allMarkdownRemark","postsPerPage","pageInfo","perPage","Array","from","length","Math","ceil","v","i","setState","render","posts","edges","pathNames","location","pathname","split","page","map","node","title","frontmatter","fields","slug","key","date","dangerouslySetInnerHTML","__html","html","aria-label","className","p","to","React","Component","blogListQuery"],"mappings":"2SAGqBA,E,qHACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CAAEC,aAAc,CAAC,IAFb,E,2BAIrBC,kBAAA,WACIC,KAAKC,gB,EAETC,0BAAA,WACIF,KAAKC,gB,EAETA,aAAA,WACI,IAAME,EAAaH,KAAKJ,MAAMQ,KAAKC,kBAAkBF,WAC/CG,EAAeN,KAAKJ,MAAMQ,KAAKC,kBAAkBE,SAASC,QAC5DV,EAAeW,MAAMC,KACvB,CAAEC,OAAQC,KAAKC,KAAKV,EAAaG,KACjC,SAACQ,EAAGC,GAAJ,OAAUA,EAAI,KAEhBf,KAAKgB,SAAS,CAAElB,kB,EAEpBmB,OAAA,WACI,IAAMC,EAAQlB,KAAKJ,MAAMQ,KAAKC,kBAAkBc,MAC1CC,EAAYpB,KAAKJ,MAAMyB,SAASC,SAASC,MAAM,KAC/CC,EAAOJ,EAAUA,EAAUT,OAAS,GAC1C,OACE,kBAAC,IAAD,KACGO,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNC,EAAQD,EAAKE,YAAYD,OAASD,EAAKG,OAAOC,KACpD,OACE,yBAAKC,IAAKL,EAAKG,OAAOC,MACpB,4BAAKH,GACL,2CAAiBD,EAAKE,YAAYI,MAClC,yBAAKC,wBAAyB,CAAEC,OAAQR,EAAKS,YAInD,yBAAKC,aAAW,2BACd,wBAAIC,UAAU,cACXrC,KAAKH,MAAMC,aAAa2B,KAAI,SAAAa,GAAC,OAC5B,wBAAID,UAAS,cAAeb,GAAQc,EAAI,SAAW,IAAMP,IAAKO,GAC5D,kBAAC,OAAD,CAAMD,UAAS,YAAeE,GAAE,aAAeD,GAC5CA,W,GAzCmBE,IAAMC,WAmD/BC,EAAa","file":"component---src-templates-blog-list-template-js-98b4a06c1a01ef2f670c.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nexport default class BlogList extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { pageNumArray: [1] }\n  }\ncomponentDidMount() {\n    this.setPageArray()\n  }\ncomponentWillReceiveProps() {\n    this.setPageArray()\n  }\nsetPageArray() {\n    const totalCount = this.props.data.allMarkdownRemark.totalCount\n    const postsPerPage = this.props.data.allMarkdownRemark.pageInfo.perPage\n    let pageNumArray = Array.from(\n      { length: Math.ceil(totalCount / postsPerPage) },\n      (v, i) => i + 1\n    )\n    this.setState({ pageNumArray })\n  }\nrender() {\n    const posts = this.props.data.allMarkdownRemark.edges\n    const pathNames = this.props.location.pathname.split(\"/\")\n    const page = pathNames[pathNames.length - 1]\n    return (\n      <Layout>\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h1>{title}</h1>\n              <b>Date Posted: {node.frontmatter.date}</b>\n              <div dangerouslySetInnerHTML={{ __html: node.html }} />\n            </div>\n          )\n        })}\n        <nav aria-label=\"Page navigation example\">\n          <ul className=\"pagination\">\n            {this.state.pageNumArray.map(p => (\n              <li className={`page-item ${page == p ? \"active\" : \"\"}`} key={p}>\n                <Link className={`page-link`} to={`blog/page/${p}`}>\n                  {p}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </Layout>\n    )\n  }\n}\nexport const blogListQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n          }\n          html\n        }\n      }\n      pageInfo {\n        perPage\n      }\n      totalCount\n    }\n  }\n`"],"sourceRoot":""}
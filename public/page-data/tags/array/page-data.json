{"componentChunkName":"component---src-templates-tags-js","path":"/tags/array/","result":{"data":{"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"fields":{"slug":"/clone-array/"},"frontmatter":{"title":"How to Clone Array in JavaScript","date":"2019-05-04"},"html":"<p>There are a few ways to clone an array in JavaScript,</p>\n<h3>Object.assign</h3>\n<p><code>Object.assign</code> allows us to make a shallow copy of any kind of object including arrays.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = Object.assign([], a); // [1,2,3]</pre>\n<h3>Array.slice</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = a.slice(0); // [1,2,3]</pre>\n<h3>Array.from</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array. It takes array like objects like <code>Set</code> and it also takes an array as an argument.</p>\n<pre>const a = [1,2,3];\nconst b = Array.from(a); // [1,2,3]</pre>\n<h3>Spread Operator</h3>\n<p>The fastest way to copy an array, which is available with ES6 or later, is the spread operator.</p>\n<pre>const a = [1,2,3];\nconst b = [...a]; // [1,2,3]</pre>\n<h3>JSON.parse and JSON.stringify</h3>\n<p>This allows for deep copy of an array and only works if the objects in the array are plain objects. It can be used like this:</p>\n<pre>const a = [1,2,3];\nconst b = JSON.parse(JSON.stringify(a)); // [1,2,3]</pre>"}},{"node":{"fields":{"slug":"/send-email/"},"frontmatter":{"title":"How to Send Email with SendGrid in Node.js Apps","date":"2019-05-04"},"html":"<p>SendGrid is a great service made by Twilio for sending emails. Rather than setting up your own email server for sending email with your apps, we use SendGrid to do the hard work for us. It also decrease the chance of email ending up in spam since it is a known trustworthy service.\nIt also has very easy to use libraries for various platforms for sending emails. Node.js is one of the platforms that are supported.\nTo send emails with SendGrid, install the SendGrid SDK package by running <code>npm i @sendgrid/mail</code> . Then in your code, add <code>const sgMail = require(‘@sendgrid/mail’);</code> to import the installed package.\nThen in your code, you send email by:</p>\n<pre><code>sgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst msg = {\n  to: email,\n  from: 'email@example.com',\n  subject: 'Example Email',\n  text: `\n    Dear user,  Here is your email.`,\n  html: `\n    &#x3C;p>Dear user,&#x3C;/p>&#x3C;/pre>\n        Here is your email.&#x3C;/p>`,\n};\nsgMail.send(msg);\n</code></pre>\n<p>where <code>process.env.SENDGRID_API_KEY</code> is the SendGrid’s API, which should be stored as an environment variable since it is a secret.\nTesting is easy since you don’t need to set up a local development email server.\nSending email is this simple and easy with SendGrid API. It is also free if you send small amounts of email, which is a great benefit.\n<img src=\"https://cdn-images-1.medium.com/max/800/1*EdbfsnL3ABxWj2iVWmoIWA.png\"></p>"}},{"node":{"fields":{"slug":"/concat-array/"},"frontmatter":{"title":"How to Concatenate Array in JavaScript","date":"2019-05-04"},"html":"<p>There are a few ways to concatenate arrays in JavaScript.</p>\n<h2>Array.concat</h2>\n<p>We can all <code>Array.concat</code> on an array to combine 2 arrays and return the new one. For example:</p>\n<pre><code>const a = [1,2,3];\nconst b = [4,5];\nconst c = a.concat(b) // [1,2,3,4,5]\n</code></pre>\n<h2>Array.push</h2>\n<p>We can push elements of one array into another.</p>\n<pre><code>const a = [1,2,3];\nconst b = [4,5];\nlet c = Object.assign([], a);\nfor (let i = 0; i &#x3C; b.length; i++){\n  c.push(b[i]);\n}\nconsole.log(c); // [1,2,3,4,5]\n</code></pre>\n<p>What we did is make a copy of <code>a</code> and assigned it to <code>c</code> , then pushed the elements of <code>b</code> by looping through it and adding them to the end of <code>c</code> .</p>\n<h2>Spread Operator</h2>\n<p>With ES6 or later, we can use the spread operator to spread the items from another array into a new array by doing the following:</p>\n<pre><code>const a = [1,2,3];\nconst b = [4,5];\nconst c = [...a, ...b];\nconsole.log(c); // [1,2,3,4,5]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}}]}},"pageContext":{"tag":"array"}}}
{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/blog/page/1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/check-variable-number/"},"frontmatter":{"title":"How to Check if a Variable is a Number","date":"2019-05-04"},"html":"<p>We can check if a variable is a number in multiple ways.</p>\n<h2>isNaN</h2>\n<p>We can check by calling <code>isNaN</code> with the variable as the argument. It also detects if a string’s content is a number. For example:</p>\n<pre><code>isNaN(1) // false\nisNaN('1') // false\nisNaN('abc') // true\n</code></pre>\n<p><strong>Note:</strong> <code>isNaN(null)</code> is <code>true</code> .</p>\n<h3>typeof Operator</h3>\n<p>We can use the <code>typeof</code> operator before a variable to check if it’s a number, like so:</p>\n<pre><code>typeof 1 == 'number' // true\ntypeof '1' == 'number' // false\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}},{"node":{"fields":{"slug":"/clone-array/"},"frontmatter":{"title":"How to Clone Array in JavaScript","date":"2019-05-04"},"html":"<p>There are a few ways to clone an array in JavaScript,</p>\n<h3>Object.assign</h3>\n<p><code>Object.assign</code> allows us to make a shallow copy of any kind of object including arrays.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = Object.assign([], a); // [1,2,3]</pre>\n<h3>Array.slice</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = a.slice(0); // [1,2,3]</pre>\n<h3>Array.from</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array. It takes array like objects like <code>Set</code> and it also takes an array as an argument.</p>\n<pre>const a = [1,2,3];\nconst b = Array.from(a); // [1,2,3]</pre>\n<h3>Spread Operator</h3>\n<p>The fastest way to copy an array, which is available with ES6 or later, is the spread operator.</p>\n<pre>const a = [1,2,3];\nconst b = [...a]; // [1,2,3]</pre>\n<h3>JSON.parse and JSON.stringify</h3>\n<p>This allows for deep copy of an array and only works if the objects in the array are plain objects. It can be used like this:</p>\n<pre>const a = [1,2,3];\nconst b = JSON.parse(JSON.stringify(a)); // [1,2,3]</pre>"}},{"node":{"fields":{"slug":"/send-email/"},"frontmatter":{"title":"How to Send Email with SendGrid in Node.js Apps","date":"2019-05-04"},"html":"<p>SendGrid is a great service made by Twilio for sending emails. Rather than setting up your own email server for sending email with your apps, we use SendGrid to do the hard work for us. It also decrease the chance of email ending up in spam since it is a known trustworthy service.\nIt also has very easy to use libraries for various platforms for sending emails. Node.js is one of the platforms that are supported.\nTo send emails with SendGrid, install the SendGrid SDK package by running <code>npm i @sendgrid/mail</code> . Then in your code, add <code>const sgMail = require(‘@sendgrid/mail’);</code> to import the installed package.\nThen in your code, you send email by:</p>\n<pre><code>sgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst msg = {\n  to: email,\n  from: 'email@example.com',\n  subject: 'Example Email',\n  text: `\n    Dear user,  Here is your email.`,\n  html: `\n    &#x3C;p>Dear user,&#x3C;/p>&#x3C;/pre>\n        Here is your email.&#x3C;/p>`,\n};\nsgMail.send(msg);\n</code></pre>\n<p>where <code>process.env.SENDGRID_API_KEY</code> is the SendGrid’s API, which should be stored as an environment variable since it is a secret.\nTesting is easy since you don’t need to set up a local development email server.\nSending email is this simple and easy with SendGrid API. It is also free if you send small amounts of email, which is a great benefit.\n<img src=\"https://cdn-images-1.medium.com/max/800/1*EdbfsnL3ABxWj2iVWmoIWA.png\"></p>"}},{"node":{"fields":{"slug":"/exponentation/"},"frontmatter":{"title":"How to do Exponentiation in JavaScript","date":"2019-05-04"},"html":"<p>There are multiple to compute exponents with JavaScript.\nThe newest way is the exponentiation operator <code>**</code>, available with ES2016 or higher.\nFor example, we can do this:</p>\n<pre><code>const a = 2 ** 3; // 8\n</code></pre>\n<p>It is right associative, so <code>a ** b ** c</code> is equal to <code>a ** (b ** c)</code>. This works with all exponents.\nFor example:</p>\n<pre><code>const a = 2 ** (3 ** 4);\nconst b = 2 ** 3 ** 4;\na == b // true, both are 2.4178516392292583e+24\n</code></pre>\n<p>Detail browser compatibility is available at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Browser_compatibility\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic<em>Operators#Browser</em>compatibility</a>\nWe can also use the <code>Math.pow</code> function, like this:</p>\n<pre><code>const a = Math.pow(2,3) // 8\n</code></pre>\n<p>It takes 2 arguments, the first is the base and the second is the exponent. <code>Math.pow</code> works with all exponents.\n<code>Math.pow</code> is compatible with all recent browsers.\n<img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}},{"node":{"fields":{"slug":"/get-length-obj/"},"frontmatter":{"title":"How to Get the Length of An Object","date":"2019-05-04"},"html":"<p>There are 2 ways to get the length of the list of keys of an object.</p>\n<h2>Object.keys</h2>\n<p><code>Object.keys</code> gets the top level list of keys of an object and returns an array of them. For example:</p>\n<pre><code>const a = {foo: 1, bar: 2};\nconst length = Object.keys(a).length // 2\n</code></pre>\n<h2>Object.getPropertyNames</h2>\n<p><code>Object.getPropertyNames</code> also gets a list of all top level of keys of an object and return them as an array. For example:</p>\n<pre><code>const a = {foo: 1, bar: 2};\nconst length = Object.`getOwnPropertyNames`(a).length // 2\n</code></pre>\n<h2>for…in Loop</h2>\n<p>There is a special loop for looping through the keys of an object. You can do the following:</p>\n<pre><code>const a = {foo: 1, bar: 2};\nlet keysCount = 0;\nfor (let key in a) {\n    keysCount++;\n}\nconsole.log(`keysCount) // 2\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}}],"pageInfo":{"perPage":5},"totalCount":7}},"pageContext":{"limit":5,"skip":0,"numPages":2,"currentPage":1}}}
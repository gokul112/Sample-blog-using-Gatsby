{"componentChunkName":"component---src-templates-blog-list-template-js","path":"/blog/page/1","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/exponentation/"},"frontmatter":{"title":"How to do Exponentiation in JavaScript","date":"2019-05-04"},"html":"<p>There are multiple to compute exponents with JavaScript.\nThe newest way is the exponentiation operator <code>**</code>, available with ES2016 or higher.\nFor example, we can do this:</p>\n<pre><code>const a = 2 ** 3; // 8\n</code></pre>\n<p>It is right associative, so <code>a ** b ** c</code> is equal to <code>a ** (b ** c)</code>. This works with all exponents.\nFor example:</p>\n<pre><code>const a = 2 ** (3 ** 4);\nconst b = 2 ** 3 ** 4;\na == b // true, both are 2.4178516392292583e+24\n</code></pre>\n<p>Detail browser compatibility is available at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Browser_compatibility\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic<em>Operators#Browser</em>compatibility</a>\nWe can also use the <code>Math.pow</code> function, like this:</p>\n<pre><code>const a = Math.pow(2,3) // 8\n</code></pre>\n<p>It takes 2 arguments, the first is the base and the second is the exponent. <code>Math.pow</code> works with all exponents.\n<code>Math.pow</code> is compatible with all recent browsers.\n<img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}},{"node":{"fields":{"slug":"/concat-array/"},"frontmatter":{"title":"How to Concatenate Array in JavaScript","date":"2019-05-04"},"html":"<p>There are a few ways to concatenate arrays in JavaScript.</p>\n<h2>Array.concat</h2>\n<p>We can all <code>Array.concat</code> on an array to combine 2 arrays and return the new one. For example:</p>\n<pre><code>const a = [1,2,3];\nconst b = [4,5];\nconst c = a.concat(b) // [1,2,3,4,5]\n</code></pre>\n<h2>Array.push</h2>\n<p>We can push elements of one array into another.</p>\n<pre><code>const a = [1,2,3];\nconst b = [4,5];\nlet c = Object.assign([], a);\nfor (let i = 0; i &#x3C; b.length; i++){\n  c.push(b[i]);\n}\nconsole.log(c); // [1,2,3,4,5]\n</code></pre>\n<p>What we did is make a copy of <code>a</code> and assigned it to <code>c</code> , then pushed the elements of <code>b</code> by looping through it and adding them to the end of <code>c</code> .</p>\n<h2>Spread Operator</h2>\n<p>With ES6 or later, we can use the spread operator to spread the items from another array into a new array by doing the following:</p>\n<pre><code>const a = [1,2,3];\nconst b = [4,5];\nconst c = [...a, ...b];\nconsole.log(c); // [1,2,3,4,5]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}},{"node":{"fields":{"slug":"/clone-array/"},"frontmatter":{"title":"How to Clone Array in JavaScript","date":"2019-05-04"},"html":"<p>There are a few ways to clone an array in JavaScript,</p>\n<h3>Object.assign</h3>\n<p><code>Object.assign</code> allows us to make a shallow copy of any kind of object including arrays.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = Object.assign([], a); // [1,2,3]</pre>\n<h3>Array.slice</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array.\nFor example:</p>\n<pre>const a = [1,2,3];\nconst b = a.slice(0); // [1,2,3]</pre>\n<h3>Array.from</h3>\n<p>The <code>Array.slice</code> function returns a copy of the original array. It takes array like objects like <code>Set</code> and it also takes an array as an argument.</p>\n<pre>const a = [1,2,3];\nconst b = Array.from(a); // [1,2,3]</pre>\n<h3>Spread Operator</h3>\n<p>The fastest way to copy an array, which is available with ES6 or later, is the spread operator.</p>\n<pre>const a = [1,2,3];\nconst b = [...a]; // [1,2,3]</pre>\n<h3>JSON.parse and JSON.stringify</h3>\n<p>This allows for deep copy of an array and only works if the objects in the array are plain objects. It can be used like this:</p>\n<pre>const a = [1,2,3];\nconst b = JSON.parse(JSON.stringify(a)); // [1,2,3]</pre>"}},{"node":{"fields":{"slug":"/repeat-strings/"},"frontmatter":{"title":"How to Repeat Strings with JavaScript","date":"2019-05-04"},"html":"<p>There are a few ways to repeat a string in JavaScript. JavaScript strings have a built in <code>repeat()</code> function. You can also use a loop to do the same thing.</p>\n<h2>String.repeat Function</h2>\n<p>To use the <code>repeat</code> function, you pass in the number of times you want to repeat the string as an argument. It returns a new string\nFor example:</p>\n<pre><code>const hello = \"hello\";\nconst hello5 = A.repeat(5);\nconsole.log(hello5); // \"hellohellohellohellohello\"\n</code></pre>\n<h2>Use a loop</h2>\n<p>You can use <code>for</code> loop and <code>while</code> loop to do repeatedly concatenate strings.\nUsing a <code>for</code> loop, you can do:</p>\n<pre><code>const hello = \"hello\";\n</code></pre>\n<p>With a <code>while</code> loop, you can do:</p>\n<pre><code>const hello = \"hello\";\n</code></pre>\n<p>They both involve increment indexes up to the maximum.\n<img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}},{"node":{"fields":{"slug":"/check-variable-number/"},"frontmatter":{"title":"How to Check if a Variable is a Number","date":"2019-05-04"},"html":"<p>We can check if a variable is a number in multiple ways.</p>\n<h2>isNaN</h2>\n<p>We can check by calling <code>isNaN</code> with the variable as the argument. It also detects if a string’s content is a number. For example:</p>\n<pre><code>isNaN(1) // false\nisNaN('1') // false\nisNaN('abc') // true\n</code></pre>\n<p><strong>Note:</strong> <code>isNaN(null)</code> is <code>true</code> .</p>\n<h3>typeof Operator</h3>\n<p>We can use the <code>typeof</code> operator before a variable to check if it’s a number, like so:</p>\n<pre><code>typeof 1 == 'number' // true\ntypeof '1' == 'number' // false\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3X6EiKc-njoRpCB1AWnv3Q.png\"></p>"}}],"pageInfo":{"perPage":5},"totalCount":7}},"pageContext":{"limit":5,"skip":0,"numPages":2,"currentPage":1}}}